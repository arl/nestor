// Code generated by cpugen/gen_nes6502.go. DO NOT EDIT.
package emu

// BRK
func opcode_00(cpu *CPU) {
	cpu.tick()
	push16(cpu, cpu.PC+1)
	p := cpu.P
	p.setBit(pbitB)
	push8(cpu, uint8(p))
	cpu.P.setBit(pbitI)
	cpu.PC = cpu.Read16(IRQvector)
}

// func1
func opcode_01(cpu *CPU) {
	// indexed addressing (abs, X)
	cpu.tick()
	op_ := cpu.Read8(cpu.PC)
	cpu.PC++
	addr := uint16(uint8(op_) + cpu.X)
	lo := cpu.Read8(addr)
	hi := cpu.Read8(uint16(uint8(addr) + 1))
	oper := uint16(hi)<<8 | uint16(lo)
	// ORA
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// func2
func opcode_05(cpu *CPU) {
	// zero page addressing
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr)
	// ORA
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}
