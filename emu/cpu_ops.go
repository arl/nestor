// Code generated by cpugen/gen_nes6502.go. DO NOT EDIT.
package emu

// BRK   00
// implied addressing.
func opcode_00(cpu *CPU) {
	cpu.tick()
	{
		top := uint16(cpu.SP) + 0x0100
		cpu.Write8(top, (uint8((cpu.PC + 1) >> 8)))
		cpu.SP -= 1
	}
	{
		top := uint16(cpu.SP) + 0x0100
		cpu.Write8(top, (uint8((cpu.PC + 1) & 0xFF)))
		cpu.SP -= 1
	}
	p := cpu.P
	p.setBit(pbitB)
	{
		top := uint16(cpu.SP) + 0x0100
		cpu.Write8(top, (uint8(p)))
		cpu.SP -= 1
	}
	cpu.P.setBit(pbitI)
	cpu.PC = cpu.Read16(IRQvector)
}

// ORA   01
// indexed addressing (abs, X).
func opcode_01(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// JAM   02
// immediate addressing.
func opcode_02(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// SLO   03
// indexed addressing (abs, X).
func opcode_03(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP   04
// zero page addressing.
func opcode_04(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.tick()
}

// ORA   05
// zero page addressing.
func opcode_05(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL   06
// zero page addressing.
func opcode_06(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.Write8(oper, val)
}

// SLO   07
// zero page addressing.
func opcode_07(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// PHP   08
// implied addressing.
func opcode_08(cpu *CPU) {
	cpu.tick()
	p := cpu.P
	p |= (1 << pbitB) | (1 << pbitU)
	{
		top := uint16(cpu.SP) + 0x0100
		cpu.Write8(top, (uint8(p)))
		cpu.SP -= 1
	}
}

// ORA   09
// immediate addressing.
func opcode_09(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL   0A
// adressing accumulator.
func opcode_0A(cpu *CPU) {
	val := cpu.A
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A = val
}

// ANC   0B
// immediate addressing.
func opcode_0B(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.P.writeBit(pbitC, cpu.P.N())
}

// NOP   0C
// absolute addressing.
func opcode_0C(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.tick()
}

// ORA   0D
// absolute addressing.
func opcode_0D(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL   0E
// absolute addressing.
func opcode_0E(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.Write8(oper, val)
}

// SLO   0F
// absolute addressing.
func opcode_0F(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BPL   10
// relative addressing.
func opcode_10(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(7) == false {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// ORA   11
// indexed addressing (abs),Y.
func opcode_11(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if pagecrossed(oper, oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// JAM   12
// immediate addressing.
func opcode_12(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// SLO   13
// indexed addressing (abs),Y.
func opcode_13(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP   14
// indexed addressing: zeropage,X.
func opcode_14(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// ORA   15
// indexed addressing: zeropage,X.
func opcode_15(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL   16
// indexed addressing: zeropage,X.
func opcode_16(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.Write8(oper, val)
}

// SLO   17
// indexed addressing: zeropage,X.
func opcode_17(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// ORA   19
// absolute indexed Y.
func opcode_19(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// NOP   1A
// implied addressing.
func opcode_1A(cpu *CPU) {
	cpu.tick()
}

// SLO   1B
// absolute indexed Y.
func opcode_1B(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP   1C
// absolute indexed X.
func opcode_1C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// ORA   1D
// absolute indexed X.
func opcode_1D(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL   1E
// absolute indexed X.
func opcode_1E(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.Write8(oper, val)
}

// SLO   1F
// absolute indexed X.
func opcode_1F(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80 // carry is bit 7
	val <<= 1
	val &= 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.writeBit(pbitC, carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// JAM   22
// immediate addressing.
func opcode_22(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// BMI   30
// relative addressing.
func opcode_30(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(7) == true {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// JAM   32
// immediate addressing.
func opcode_32(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   34
// indexed addressing: zeropage,X.
func opcode_34(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// NOP   3A
// implied addressing.
func opcode_3A(cpu *CPU) {
	cpu.tick()
}

// NOP   3C
// absolute indexed X.
func opcode_3C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// JAM   42
// immediate addressing.
func opcode_42(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   44
// zero page addressing.
func opcode_44(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.tick()
}

// BVC   50
// relative addressing.
func opcode_50(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(6) == false {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// JAM   52
// immediate addressing.
func opcode_52(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   54
// indexed addressing: zeropage,X.
func opcode_54(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// NOP   5A
// implied addressing.
func opcode_5A(cpu *CPU) {
	cpu.tick()
}

// NOP   5C
// absolute indexed X.
func opcode_5C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// JAM   62
// immediate addressing.
func opcode_62(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   64
// zero page addressing.
func opcode_64(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.tick()
}

// BVS   70
// relative addressing.
func opcode_70(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(6) == true {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// JAM   72
// immediate addressing.
func opcode_72(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   74
// indexed addressing: zeropage,X.
func opcode_74(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// NOP   7A
// implied addressing.
func opcode_7A(cpu *CPU) {
	cpu.tick()
}

// NOP   7C
// absolute indexed X.
func opcode_7C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// NOP   80
// immediate addressing.
func opcode_80(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// NOP   82
// immediate addressing.
func opcode_82(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// NOP   89
// immediate addressing.
func opcode_89(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// BCC   90
// relative addressing.
func opcode_90(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(0) == false {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// JAM   92
// immediate addressing.
func opcode_92(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// BCS   B0
// relative addressing.
func opcode_B0(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(0) == true {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// JAM   B2
// immediate addressing.
func opcode_B2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   C2
// immediate addressing.
func opcode_C2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// BNE   D0
// relative addressing.
func opcode_D0(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(1) == false {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// JAM   D2
// immediate addressing.
func opcode_D2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   D4
// indexed addressing: zeropage,X.
func opcode_D4(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// NOP   DA
// implied addressing.
func opcode_DA(cpu *CPU) {
	cpu.tick()
}

// NOP   DC
// absolute indexed X.
func opcode_DC(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// NOP   E2
// immediate addressing.
func opcode_E2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// NOP   EA
// implied addressing.
func opcode_EA(cpu *CPU) {
	cpu.tick()
}

// BEQ   F0
// relative addressing.
func opcode_F0(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.bit(1) == true {
		// branching
		if pagecrossed(cpu.PC+1, oper) {
			cpu.tick()
		}
		cpu.tick()
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// JAM   F2
// immediate addressing.
func opcode_F2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	panic("Halt and catch fire!")
}

// NOP   F4
// indexed addressing: zeropage,X.
func opcode_F4(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// NOP   FA
// implied addressing.
func opcode_FA(cpu *CPU) {
	cpu.tick()
}

// NOP   FC
// absolute indexed X.
func opcode_FC(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if pagecrossed(oper, addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

var gdefs = [256]func(*CPU){
	0x00: opcode_00,
	0x01: opcode_01,
	0x02: opcode_02,
	0x03: opcode_03,
	0x04: opcode_04,
	0x05: opcode_05,
	0x06: opcode_06,
	0x07: opcode_07,
	0x08: opcode_08,
	0x09: opcode_09,
	0x0A: opcode_0A,
	0x0B: opcode_0B,
	0x0C: opcode_0C,
	0x0D: opcode_0D,
	0x0E: opcode_0E,
	0x0F: opcode_0F,
	0x10: opcode_10,
	0x11: opcode_11,
	0x12: opcode_12,
	0x13: opcode_13,
	0x14: opcode_14,
	0x15: opcode_15,
	0x16: opcode_16,
	0x17: opcode_17,
	0x19: opcode_19,
	0x1A: opcode_1A,
	0x1B: opcode_1B,
	0x1C: opcode_1C,
	0x1D: opcode_1D,
	0x1E: opcode_1E,
	0x1F: opcode_1F,
	0x22: opcode_22,
	0x30: opcode_30,
	0x32: opcode_32,
	0x34: opcode_34,
	0x3A: opcode_3A,
	0x3C: opcode_3C,
	0x42: opcode_42,
	0x44: opcode_44,
	0x50: opcode_50,
	0x52: opcode_52,
	0x54: opcode_54,
	0x5A: opcode_5A,
	0x5C: opcode_5C,
	0x62: opcode_62,
	0x64: opcode_64,
	0x70: opcode_70,
	0x72: opcode_72,
	0x74: opcode_74,
	0x7A: opcode_7A,
	0x7C: opcode_7C,
	0x80: opcode_80,
	0x82: opcode_82,
	0x89: opcode_89,
	0x90: opcode_90,
	0x92: opcode_92,
	0xB0: opcode_B0,
	0xB2: opcode_B2,
	0xC2: opcode_C2,
	0xD0: opcode_D0,
	0xD2: opcode_D2,
	0xD4: opcode_D4,
	0xDA: opcode_DA,
	0xDC: opcode_DC,
	0xE2: opcode_E2,
	0xEA: opcode_EA,
	0xF0: opcode_F0,
	0xF2: opcode_F2,
	0xF4: opcode_F4,
	0xFA: opcode_FA,
	0xFC: opcode_FC,
}
