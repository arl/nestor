package hw

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type loopy uint16

func (l loopy) coarsex() uint8 {
	return uint8(l & 0x1f)
}

func (l *loopy) setCoarsex(val uint8) {
	*l &^= 0x1f
	*l |= loopy(val & 0x1f)
}

func (l loopy) coarsey() uint8 {
	return uint8((l >> 5) & 0x1f)
}

func (l *loopy) setCoarsey(val uint8) {
	*l &^= 0x1f << 5
	*l |= loopy(val&0x1f) << 5
}

func (l loopy) nametable() uint8 {
	return uint8((l >> 10) & 0x3)
}

func (l *loopy) setNametable(val uint8) {
	*l &^= 0x3 << 10
	*l |= loopy(val&0x3) << 10
}

func (l loopy) finey() uint16 {
	return uint16((l >> 12) & 0x7)
}

func (l *loopy) setFiney(val uint16) {
	*l &^= 0x7 << 12
	*l |= loopy(val&0x7) << 12
}

func (l loopy) low() uint8 {
	return uint8(l & 0xff)
}

func (l *loopy) setLow(val uint8) {
	*l &^= 0xff
	*l |= loopy(val & 0xff)
}

func (l loopy) high() uint8 {
	return uint8((l >> 8) & 0x7f)
}

func (l *loopy) setHigh(val uint8) {
	*l &^= 0x7f << 8
	*l |= loopy(val&0x7f) << 8
}

func (l loopy) addr() uint16 {
	return uint16(l & 0x3fff)
}

func (l *loopy) setAddr(val uint16) {
	*l &^= 0x3fff
	*l |= loopy(val & 0x3fff)
}

func (l loopy) val() uint16 {
	return uint16(l & 0x7fff)
}

func (l *loopy) setVal(val uint16) {
	*l &^= 0x7fff
	*l |= loopy(val & 0x7fff)
}

type ppuctrl uint8

func (p ppuctrl) nametable() uint8 {
	return uint8(p & 0x3)
}

func (p *ppuctrl) setNametable(val uint8) {
	*p &^= 0x3
	*p |= ppuctrl(val & 0x3)
}

func (p ppuctrl) incr() bool {
	return p&0x4 != 0
}

func (p *ppuctrl) setIncr(val bool) {
	var ival ppuctrl
	if val {
		ival = 1
	}
	*p &^= 0x4
	*p |= ival << 2
}

func (p ppuctrl) spriteTable() bool {
	return p&0x8 != 0
}

func (p *ppuctrl) setSpriteTable(val bool) {
	var ival ppuctrl
	if val {
		ival = 1
	}
	*p &^= 0x8
	*p |= ival << 3
}

func (p ppuctrl) bgTable() uint16 {
	return uint16((p >> 4) & 0x1)
}

func (p *ppuctrl) setBgTable(val uint16) {
	*p &^= 0x1 << 4
	*p |= ppuctrl(val&0x1) << 4
}

func (p ppuctrl) spriteSize() bool {
	return p&0x20 != 0
}

func (p *ppuctrl) setSpriteSize(val bool) {
	var ival ppuctrl
	if val {
		ival = 1
	}
	*p &^= 0x20
	*p |= ival << 5
}

func (p ppuctrl) slave() bool {
	return p&0x40 != 0
}

func (p *ppuctrl) setSlave(val bool) {
	var ival ppuctrl
	if val {
		ival = 1
	}
	*p &^= 0x40
	*p |= ival << 6
}

func (p ppuctrl) nmi() bool {
	return p&0x80 != 0
}

func (p *ppuctrl) setNmi(val bool) {
	var ival ppuctrl
	if val {
		ival = 1
	}
	*p &^= 0x80
	*p |= ival << 7
}

func (p ppuctrl) val() uint8 {
	return uint8(p & 0xff)
}

func (p *ppuctrl) setVal(val uint8) {
	*p &^= 0xff
	*p |= ppuctrl(val & 0xff)
}

type ppumask uint8

func (p ppumask) gray() bool {
	return p&0x1 != 0
}

func (p *ppumask) setGray(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x1
	*p |= ival
}

func (p ppumask) bgLeft() bool {
	return p&0x2 != 0
}

func (p *ppumask) setBgLeft(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x2
	*p |= ival << 1
}

func (p ppumask) spriteLeft() bool {
	return p&0x4 != 0
}

func (p *ppumask) setSpriteLeft(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x4
	*p |= ival << 2
}

func (p ppumask) bg() bool {
	return p&0x8 != 0
}

func (p *ppumask) setBg(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x8
	*p |= ival << 3
}

func (p ppumask) sprites() bool {
	return p&0x10 != 0
}

func (p *ppumask) setSprites(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x10
	*p |= ival << 4
}

func (p ppumask) red() bool {
	return p&0x20 != 0
}

func (p *ppumask) setRed(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x20
	*p |= ival << 5
}

func (p ppumask) green() bool {
	return p&0x40 != 0
}

func (p *ppumask) setGreen(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x40
	*p |= ival << 6
}

func (p ppumask) blue() bool {
	return p&0x80 != 0
}

func (p *ppumask) setBlue(val bool) {
	var ival ppumask
	if val {
		ival = 1
	}
	*p &^= 0x80
	*p |= ival << 7
}

func (p ppumask) val() uint8 {
	return uint8(p & 0xff)
}

func (p *ppumask) setVal(val uint8) {
	*p &^= 0xff
	*p |= ppumask(val & 0xff)
}

type ppustatus uint8

func (p ppustatus) openBus() uint8 {
	return uint8(p & 0x1f)
}

func (p *ppustatus) setOpenBus(val uint8) {
	*p &^= 0x1f
	*p |= ppustatus(val & 0x1f)
}

func (p ppustatus) spriteOverflow() bool {
	return p&0x20 != 0
}

func (p *ppustatus) setSpriteOverflow(val bool) {
	var ival ppustatus
	if val {
		ival = 1
	}
	*p &^= 0x20
	*p |= ival << 5
}

func (p ppustatus) spriteHit() bool {
	return p&0x40 != 0
}

func (p *ppustatus) setSpriteHit(val bool) {
	var ival ppustatus
	if val {
		ival = 1
	}
	*p &^= 0x40
	*p |= ival << 6
}

func (p ppustatus) vblank() bool {
	return p&0x80 != 0
}

func (p *ppustatus) setVblank(val bool) {
	var ival ppustatus
	if val {
		ival = 1
	}
	*p &^= 0x80
	*p |= ival << 7
}

func (p ppustatus) val() uint8 {
	return uint8(p & 0xff)
}

func (p *ppustatus) setVal(val uint8) {
	*p &^= 0xff
	*p |= ppustatus(val & 0xff)
}
