// Code generated by cpugen/gen_nes6502.go. DO NOT EDIT.
package hw

import "fmt"

// ORA - indexed addressing (abs, X).
func opcode01(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, cpu.A|val)
}

// STP - implied addressing.
func opcode02(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// SLO - indexed addressing (abs, X).
func opcode03(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.setreg(&cpu.A, cpu.A|val)
	cpu.Write8(oper, val)
}

// NOP - zero page addressing.
func opcode04(cpu *CPU) {
	oper := cpu.zpg()
	_ = cpu.Read8(oper) // dummy read
}

// ORA - zero page addressing.
func opcode05(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, cpu.A|val)
}

// ASL - zero page addressing.
func opcode06(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SLO - zero page addressing.
func opcode07(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.setreg(&cpu.A, cpu.A|val)
	cpu.Write8(oper, val)
}

// PHP - implied addressing.
func opcode08(cpu *CPU) {
	cpu.imp()
	p := cpu.P | Break | Reserved
	cpu.push8(uint8(p))
}

// ORA - immediate addressing.
func opcode09(cpu *CPU) {
	val := cpu.fetch8()
	cpu.setreg(&cpu.A, cpu.A|val)
}

// ASL - adressing accumulator.
func opcode0A(cpu *CPU) {
	cpu.acc()
	val := cpu.A
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A = val
}

// ANC - immediate addressing.
func opcode0B(cpu *CPU) {
	val := cpu.fetch8()
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.P.clearFlags(Carry)
	if cpu.P.hasFlag(Negative) {
		cpu.P.setFlags(Carry)
	}
}

// NOP - absolute addressing.
func opcode0C(cpu *CPU) {
	oper := cpu.abs()
	_ = cpu.Read8(oper) // dummy read
}

// ORA - absolute addressing.
func opcode0D(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, cpu.A|val)
}

// ASL - absolute addressing.
func opcode0E(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SLO - absolute addressing.
func opcode0F(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.setreg(&cpu.A, cpu.A|val)
	cpu.Write8(oper, val)
}

// BPL - relative addressing.
func opcode10(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Negative, Negative)
}

// ORA - indexed addressing (abs),Y.
func opcode11(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, cpu.A|val)
}

// STP - implied addressing.
func opcode12(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// SLO - indexed addressing (abs),Y.
func opcode13(cpu *CPU) {
	oper := cpu.izy(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.setreg(&cpu.A, cpu.A|val)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode14(cpu *CPU) {
	oper := cpu.zpx()
	_ = cpu.Read8(oper) // dummy read
}

// ORA - indexed addressing: zeropage,X.
func opcode15(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, cpu.A|val)
}

// ASL - indexed addressing: zeropage,X.
func opcode16(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SLO - indexed addressing: zeropage,X.
func opcode17(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.setreg(&cpu.A, cpu.A|val)
	cpu.Write8(oper, val)
}

// CLC - implied addressing.
func opcode18(cpu *CPU) {
	cpu.imp()
	cpu.P.clearFlags(Carry)
}

// ORA - absolute indexed Y.
func opcode19(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, cpu.A|val)
}

// NOP - implied addressing.
func opcode1A(cpu *CPU) {
	cpu.imp()
}

// SLO - absolute indexed Y.
func opcode1B(cpu *CPU) {
	oper := cpu.aby(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.setreg(&cpu.A, cpu.A|val)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode1C(cpu *CPU) {
	oper := cpu.abx(false)
	_ = cpu.Read8(oper) // dummy read
}

// ORA - absolute indexed X.
func opcode1D(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, cpu.A|val)
}

// ASL - absolute indexed X.
func opcode1E(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SLO - absolute indexed X.
func opcode1F(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.setreg(&cpu.A, cpu.A|val)
	cpu.Write8(oper, val)
}

// AND - indexed addressing (abs, X).
func opcode21(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// STP - implied addressing.
func opcode22(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// RLA - indexed addressing (abs, X).
func opcode23(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BIT - zero page addressing.
func opcode24(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Overflow | Negative)
	cpu.P |= P(val & 0b11000000)
	if cpu.A&val == 0 {
		cpu.P.setFlags(Zero)
	}
}

// AND - zero page addressing.
func opcode25(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// ROL - zero page addressing.
func opcode26(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RLA - zero page addressing.
func opcode27(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// PLP - implied addressing.
func opcode28(cpu *CPU) {
	cpu.imp()
	var p uint8
	_ = cpu.Read8(uint16(cpu.SP) + 0x0100) // dummy read
	p = cpu.pull8()
	const mask uint8 = 0b11001111 // ignore B and U bits
	cpu.P = P(((uint8(cpu.P)) & (^mask)) | ((p) & (mask)))
}

// AND - immediate addressing.
func opcode29(cpu *CPU) {
	val := cpu.fetch8()
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// ROL - adressing accumulator.
func opcode2A(cpu *CPU) {
	cpu.acc()
	val := cpu.A
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A = val
}

// ANC - immediate addressing.
func opcode2B(cpu *CPU) {
	val := cpu.fetch8()
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.P.clearFlags(Carry)
	if cpu.P.hasFlag(Negative) {
		cpu.P.setFlags(Carry)
	}
}

// BIT - absolute addressing.
func opcode2C(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Overflow | Negative)
	cpu.P |= P(val & 0b11000000)
	if cpu.A&val == 0 {
		cpu.P.setFlags(Zero)
	}
}

// AND - absolute addressing.
func opcode2D(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// ROL - absolute addressing.
func opcode2E(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RLA - absolute addressing.
func opcode2F(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BMI - relative addressing.
func opcode30(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Negative, 0)
}

// AND - indexed addressing (abs),Y.
func opcode31(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// STP - implied addressing.
func opcode32(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// RLA - indexed addressing (abs),Y.
func opcode33(cpu *CPU) {
	oper := cpu.izy(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode34(cpu *CPU) {
	oper := cpu.zpx()
	_ = cpu.Read8(oper) // dummy read
}

// AND - indexed addressing: zeropage,X.
func opcode35(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// ROL - indexed addressing: zeropage,X.
func opcode36(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RLA - indexed addressing: zeropage,X.
func opcode37(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// SEC - implied addressing.
func opcode38(cpu *CPU) {
	cpu.imp()
	cpu.P.setFlags(Carry)
}

// AND - absolute indexed Y.
func opcode39(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// NOP - implied addressing.
func opcode3A(cpu *CPU) {
	cpu.imp()
}

// RLA - absolute indexed Y.
func opcode3B(cpu *CPU) {
	oper := cpu.aby(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode3C(cpu *CPU) {
	oper := cpu.abx(false)
	_ = cpu.Read8(oper) // dummy read
}

// AND - absolute indexed X.
func opcode3D(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// ROL - absolute indexed X.
func opcode3E(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RLA - absolute indexed X.
func opcode3F(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x80
	val <<= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 0
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A &= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// RTI - implied addressing.
func opcode40(cpu *CPU) {
	cpu.imp()
	var p uint8
	_ = cpu.Read8(uint16(cpu.SP) + 0x0100) // dummy read
	p = cpu.pull8()
	const mask uint8 = 0b11001111 // ignore B and U bits
	cpu.P = P(((uint8(cpu.P)) & (^mask)) | ((p) & (mask)))
	cpu.PC = cpu.pull16()
}

// EOR - indexed addressing (abs, X).
func opcode41(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// STP - implied addressing.
func opcode42(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// SRE - indexed addressing (abs, X).
func opcode43(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - zero page addressing.
func opcode44(cpu *CPU) {
	oper := cpu.zpg()
	_ = cpu.Read8(oper) // dummy read
}

// EOR - zero page addressing.
func opcode45(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LSR - zero page addressing.
func opcode46(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SRE - zero page addressing.
func opcode47(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// PHA - implied addressing.
func opcode48(cpu *CPU) {
	cpu.imp()
	cpu.push8(cpu.A)
}

// EOR - immediate addressing.
func opcode49(cpu *CPU) {
	val := cpu.fetch8()
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LSR - adressing accumulator.
func opcode4A(cpu *CPU) {
	cpu.acc()
	val := cpu.A
	carry := val & 0x01 // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A = val
}

// ALR - immediate addressing.
func opcode4B(cpu *CPU) {
	val := cpu.fetch8()
	// like and + lsr but saves one tick
	cpu.A &= val
	carry := cpu.A & 0x01 // carry is bit 0
	cpu.A = (cpu.A >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
}

// JMP - absolute addressing.
func opcode4C(cpu *CPU) {
	oper := cpu.abs()
	cpu.PC = oper
}

// EOR - absolute addressing.
func opcode4D(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LSR - absolute addressing.
func opcode4E(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SRE - absolute addressing.
func opcode4F(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BVC - relative addressing.
func opcode50(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Overflow, Overflow)
}

// EOR - indexed addressing (abs),Y.
func opcode51(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// STP - implied addressing.
func opcode52(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// SRE - indexed addressing (abs),Y.
func opcode53(cpu *CPU) {
	oper := cpu.izy(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode54(cpu *CPU) {
	oper := cpu.zpx()
	_ = cpu.Read8(oper) // dummy read
}

// EOR - indexed addressing: zeropage,X.
func opcode55(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LSR - indexed addressing: zeropage,X.
func opcode56(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SRE - indexed addressing: zeropage,X.
func opcode57(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// CLI - implied addressing.
func opcode58(cpu *CPU) {
	cpu.imp()
	cpu.P.clearFlags(Interrupt)
}

// EOR - absolute indexed Y.
func opcode59(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// NOP - implied addressing.
func opcode5A(cpu *CPU) {
	cpu.imp()
}

// SRE - absolute indexed Y.
func opcode5B(cpu *CPU) {
	oper := cpu.aby(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode5C(cpu *CPU) {
	oper := cpu.abx(false)
	_ = cpu.Read8(oper) // dummy read
}

// EOR - absolute indexed X.
func opcode5D(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LSR - absolute indexed X.
func opcode5E(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// SRE - absolute indexed X.
func opcode5F(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01   // carry is bit 0
	val = (val >> 1) & 0x7f
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A ^= val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.Write8(oper, val)
}

// RTS - implied addressing.
func opcode60(cpu *CPU) {
	cpu.imp()
	_ = cpu.Read8(uint16(cpu.SP) + 0x0100) // dummy read
	cpu.PC = cpu.pull16()
	cpu.fetch8()
}

// ADC - indexed addressing (abs, X).
func opcode61(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.add(val)
}

// STP - implied addressing.
func opcode62(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// RRA - indexed addressing (abs, X).
func opcode63(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.add(val)
	cpu.Write8(oper, val)
}

// NOP - zero page addressing.
func opcode64(cpu *CPU) {
	oper := cpu.zpg()
	_ = cpu.Read8(oper) // dummy read
}

// ADC - zero page addressing.
func opcode65(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.add(val)
}

// ROR - zero page addressing.
func opcode66(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RRA - zero page addressing.
func opcode67(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.add(val)
	cpu.Write8(oper, val)
}

// PLA - implied addressing.
func opcode68(cpu *CPU) {
	cpu.imp()
	_ = cpu.Read8(uint16(cpu.SP) + 0x0100) // dummy read
	cpu.A = cpu.pull8()
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// ADC - immediate addressing.
func opcode69(cpu *CPU) {
	val := cpu.fetch8()
	cpu.add(val)
}

// ROR - adressing accumulator.
func opcode6A(cpu *CPU) {
	cpu.acc()
	val := cpu.A
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.A = val
}

// ARR - immediate addressing.
func opcode6B(cpu *CPU) {
	val := cpu.fetch8()
	cpu.A &= val
	cpu.A >>= 1
	cpu.P.clearFlags(Overflow)
	if (cpu.A>>6)^(cpu.A>>5)&0x01 != 0 {
		cpu.P.setFlags(Overflow)
	}
	if cpu.P.hasFlag(Carry) {
		cpu.A |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.P.clearFlags(Carry)
	if cpu.A&(1<<6) != 0 {
		cpu.P.setFlags(Carry)
	}
}

// JMP - indirect addressing.
func opcode6C(cpu *CPU) {
	oper := cpu.ind()
	cpu.PC = oper
}

// ADC - absolute addressing.
func opcode6D(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.add(val)
}

// ROR - absolute addressing.
func opcode6E(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RRA - absolute addressing.
func opcode6F(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.add(val)
	cpu.Write8(oper, val)
}

// BVS - relative addressing.
func opcode70(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Overflow, 0)
}

// ADC - indexed addressing (abs),Y.
func opcode71(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	cpu.add(val)
}

// STP - implied addressing.
func opcode72(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// RRA - indexed addressing (abs),Y.
func opcode73(cpu *CPU) {
	oper := cpu.izy(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.add(val)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode74(cpu *CPU) {
	oper := cpu.zpx()
	_ = cpu.Read8(oper) // dummy read
}

// ADC - indexed addressing: zeropage,X.
func opcode75(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.add(val)
}

// ROR - indexed addressing: zeropage,X.
func opcode76(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RRA - indexed addressing: zeropage,X.
func opcode77(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.add(val)
	cpu.Write8(oper, val)
}

// SEI - implied addressing.
func opcode78(cpu *CPU) {
	cpu.imp()
	cpu.P.setFlags(Interrupt)
}

// ADC - absolute indexed Y.
func opcode79(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.add(val)
}

// NOP - implied addressing.
func opcode7A(cpu *CPU) {
	cpu.imp()
}

// RRA - absolute indexed Y.
func opcode7B(cpu *CPU) {
	oper := cpu.aby(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.add(val)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode7C(cpu *CPU) {
	oper := cpu.abx(false)
	_ = cpu.Read8(oper) // dummy read
}

// ADC - absolute indexed X.
func opcode7D(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	cpu.add(val)
}

// ROR - absolute indexed X.
func opcode7E(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.Write8(oper, val)
}

// RRA - absolute indexed X.
func opcode7F(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	carry := val & 0x01
	val >>= 1
	if cpu.P.hasFlag(Carry) {
		val |= 1 << 7
	}
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.P.clearFlags(Carry)
	if carry != 0 {
		cpu.P.setFlags(Carry)
	}
	cpu.add(val)
	cpu.Write8(oper, val)
}

// NOP - immediate addressing.
func opcode80(cpu *CPU) {
	val := cpu.fetch8()
	_ = val
}

// STA - indexed addressing (abs, X).
func opcode81(cpu *CPU) {
	oper := cpu.izx()
	cpu.Write8(oper, cpu.A)
}

// NOP - immediate addressing.
func opcode82(cpu *CPU) {
	val := cpu.fetch8()
	_ = val
}

// SAX - indexed addressing (abs, X).
func opcode83(cpu *CPU) {
	oper := cpu.izx()
	cpu.Write8(oper, cpu.A&cpu.X)
}

// STY - zero page addressing.
func opcode84(cpu *CPU) {
	oper := cpu.zpg()
	cpu.Write8(oper, cpu.Y)
}

// STA - zero page addressing.
func opcode85(cpu *CPU) {
	oper := cpu.zpg()
	cpu.Write8(oper, cpu.A)
}

// STX - zero page addressing.
func opcode86(cpu *CPU) {
	oper := cpu.zpg()
	cpu.Write8(oper, cpu.X)
}

// SAX - zero page addressing.
func opcode87(cpu *CPU) {
	oper := cpu.zpg()
	cpu.Write8(oper, cpu.A&cpu.X)
}

// DEY - implied addressing.
func opcode88(cpu *CPU) {
	cpu.imp()
	cpu.setreg(&cpu.Y, cpu.Y-1)
}

// NOP - immediate addressing.
func opcode89(cpu *CPU) {
	val := cpu.fetch8()
	_ = val
}

// TXA - implied addressing.
func opcode8A(cpu *CPU) {
	cpu.imp()
	cpu.A = cpu.X
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.X)
}

// ANE - immediate addressing.
func opcode8B(cpu *CPU) {
	val := cpu.fetch8()
	msg := fmt.Sprintf("unsupported unstable opcode 0x8B (ANE)\nPC:0x%04X", cpu.PC)
	_ = val
	panic(msg)
}

// STY - absolute addressing.
func opcode8C(cpu *CPU) {
	oper := cpu.abs()
	cpu.Write8(oper, cpu.Y)
}

// STA - absolute addressing.
func opcode8D(cpu *CPU) {
	oper := cpu.abs()
	cpu.Write8(oper, cpu.A)
}

// STX - absolute addressing.
func opcode8E(cpu *CPU) {
	oper := cpu.abs()
	cpu.Write8(oper, cpu.X)
}

// SAX - absolute addressing.
func opcode8F(cpu *CPU) {
	oper := cpu.abs()
	cpu.Write8(oper, cpu.A&cpu.X)
}

// BCC - relative addressing.
func opcode90(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Carry, Carry)
}

// STA - indexed addressing (abs),Y.
func opcode91(cpu *CPU) {
	oper := cpu.izy(true)
	cpu.Write8(oper, cpu.A)
}

// STP - implied addressing.
func opcode92(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// SHA - indexed addressing (abs),Y.
func opcode93(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	msg := fmt.Sprintf("unsupported unstable opcode 0x93 (SHA)\nPC:0x%04X", cpu.PC)
	_ = val
	panic(msg)
}

// STY - indexed addressing: zeropage,X.
func opcode94(cpu *CPU) {
	oper := cpu.zpx()
	cpu.Write8(oper, cpu.Y)
}

// STA - indexed addressing: zeropage,X.
func opcode95(cpu *CPU) {
	oper := cpu.zpx()
	cpu.Write8(oper, cpu.A)
}

// STX - indexed addressing: zeropage,Y.
func opcode96(cpu *CPU) {
	oper := cpu.zpy()
	cpu.Write8(oper, cpu.X)
}

// SAX - indexed addressing: zeropage,Y.
func opcode97(cpu *CPU) {
	oper := cpu.zpy()
	cpu.Write8(oper, cpu.A&cpu.X)
}

// TYA - implied addressing.
func opcode98(cpu *CPU) {
	cpu.imp()
	cpu.A = cpu.Y
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.Y)
}

// STA - absolute indexed Y.
func opcode99(cpu *CPU) {
	oper := cpu.aby(true)
	cpu.Write8(oper, cpu.A)
}

// TXS - implied addressing.
func opcode9A(cpu *CPU) {
	cpu.imp()
	cpu.SP = cpu.X
}

// TAS - absolute indexed X.
func opcode9B(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	msg := fmt.Sprintf("unsupported unstable opcode 0x9B (TAS)\nPC:0x%04X", cpu.PC)
	_ = val
	panic(msg)
}

// SHY - absolute indexed Y.
func opcode9C(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	msg := fmt.Sprintf("unsupported unstable opcode 0x9C (SHY)\nPC:0x%04X", cpu.PC)
	_ = val
	panic(msg)
}

// STA - absolute indexed X.
func opcode9D(cpu *CPU) {
	oper := cpu.abx(true)
	cpu.Write8(oper, cpu.A)
}

// SHX - absolute indexed X.
func opcode9E(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	msg := fmt.Sprintf("unsupported unstable opcode 0x9E (SHX)\nPC:0x%04X", cpu.PC)
	_ = val
	panic(msg)
}

// SHA - absolute indexed Y.
func opcode9F(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	msg := fmt.Sprintf("unsupported unstable opcode 0x9F (SHA)\nPC:0x%04X", cpu.PC)
	_ = val
	panic(msg)
}

// LDY - immediate addressing.
func opcodeA0(cpu *CPU) {
	val := cpu.fetch8()
	cpu.setreg(&cpu.Y, val)
}

// LDA - indexed addressing (abs, X).
func opcodeA1(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
}

// LDX - immediate addressing.
func opcodeA2(cpu *CPU) {
	val := cpu.fetch8()
	cpu.setreg(&cpu.X, val)
}

// LAX - indexed addressing (abs, X).
func opcodeA3(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
	cpu.setreg(&cpu.X, val)
}

// LDY - zero page addressing.
func opcodeA4(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.Y, val)
}

// LDA - zero page addressing.
func opcodeA5(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
}

// LDX - zero page addressing.
func opcodeA6(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.X, val)
}

// LAX - zero page addressing.
func opcodeA7(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
	cpu.setreg(&cpu.X, val)
}

// TAY - implied addressing.
func opcodeA8(cpu *CPU) {
	cpu.imp()
	cpu.Y = cpu.A
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LDA - immediate addressing.
func opcodeA9(cpu *CPU) {
	val := cpu.fetch8()
	cpu.setreg(&cpu.A, val)
}

// TAX - implied addressing.
func opcodeAA(cpu *CPU) {
	cpu.imp()
	cpu.X = cpu.A
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LXA - immediate addressing.
func opcodeAB(cpu *CPU) {
	val := cpu.fetch8()
	val = (cpu.A | 0xff) & val
	cpu.A = val
	cpu.X = val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
}

// LDY - absolute addressing.
func opcodeAC(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.Y, val)
}

// LDA - absolute addressing.
func opcodeAD(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
}

// LDX - absolute addressing.
func opcodeAE(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.X, val)
}

// LAX - absolute addressing.
func opcodeAF(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
	cpu.setreg(&cpu.X, val)
}

// BCS - relative addressing.
func opcodeB0(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Carry, 0)
}

// LDA - indexed addressing (abs),Y.
func opcodeB1(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
}

// STP - implied addressing.
func opcodeB2(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// LAX - indexed addressing (abs),Y.
func opcodeB3(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
	cpu.setreg(&cpu.X, val)
}

// LDY - indexed addressing: zeropage,X.
func opcodeB4(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.Y, val)
}

// LDA - indexed addressing: zeropage,X.
func opcodeB5(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
}

// LDX - indexed addressing: zeropage,Y.
func opcodeB6(cpu *CPU) {
	oper := cpu.zpy()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.X, val)
}

// LAX - indexed addressing: zeropage,Y.
func opcodeB7(cpu *CPU) {
	oper := cpu.zpy()
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
	cpu.setreg(&cpu.X, val)
}

// CLV - implied addressing.
func opcodeB8(cpu *CPU) {
	cpu.imp()
	cpu.P.clearFlags(Overflow)
}

// LDA - absolute indexed Y.
func opcodeB9(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
}

// TSX - implied addressing.
func opcodeBA(cpu *CPU) {
	cpu.imp()
	cpu.X = cpu.SP
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.SP)
}

// LAS - absolute indexed Y.
func opcodeBB(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.A = cpu.SP & val
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A)
	cpu.X = cpu.A
	cpu.SP = cpu.A
}

// LDY - absolute indexed X.
func opcodeBC(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.Y, val)
}

// LDA - absolute indexed X.
func opcodeBD(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
}

// LDX - absolute indexed Y.
func opcodeBE(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.X, val)
}

// LAX - absolute indexed Y.
func opcodeBF(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.setreg(&cpu.A, val)
	cpu.setreg(&cpu.X, val)
}

// CPY - immediate addressing.
func opcodeC0(cpu *CPU) {
	val := cpu.fetch8()
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.Y - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.Y {
		cpu.P.setFlags(Carry)
	}
}

// CMP - indexed addressing (abs, X).
func opcodeC1(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// NOP - immediate addressing.
func opcodeC2(cpu *CPU) {
	val := cpu.fetch8()
	_ = val
}

// DCP - indexed addressing (abs, X).
func opcodeC3(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// CPY - zero page addressing.
func opcodeC4(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.Y - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.Y {
		cpu.P.setFlags(Carry)
	}
}

// CMP - zero page addressing.
func opcodeC5(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// DEC - zero page addressing.
func opcodeC6(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// DCP - zero page addressing.
func opcodeC7(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// INY - implied addressing.
func opcodeC8(cpu *CPU) {
	cpu.imp()
	cpu.setreg(&cpu.Y, cpu.Y+1)
}

// CMP - immediate addressing.
func opcodeC9(cpu *CPU) {
	val := cpu.fetch8()
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// DEX - implied addressing.
func opcodeCA(cpu *CPU) {
	cpu.imp()
	cpu.setreg(&cpu.X, cpu.X-1)
}

// SBX - immediate addressing.
func opcodeCB(cpu *CPU) {
	val := cpu.fetch8()
	ival := (int16(cpu.A) & int16(cpu.X)) - int16(val)
	cpu.X = uint8(ival)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.X)
	cpu.P.clearFlags(Carry)
	if ival >= 0 {
		cpu.P.setFlags(Carry)
	}
}

// CPY - absolute addressing.
func opcodeCC(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.Y - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.Y {
		cpu.P.setFlags(Carry)
	}
}

// CMP - absolute addressing.
func opcodeCD(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// DEC - absolute addressing.
func opcodeCE(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// DCP - absolute addressing.
func opcodeCF(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// BNE - relative addressing.
func opcodeD0(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Zero, Zero)
}

// CMP - indexed addressing (abs),Y.
func opcodeD1(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// STP - implied addressing.
func opcodeD2(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// DCP - indexed addressing (abs),Y.
func opcodeD3(cpu *CPU) {
	oper := cpu.izy(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// NOP - indexed addressing: zeropage,X.
func opcodeD4(cpu *CPU) {
	oper := cpu.zpx()
	_ = cpu.Read8(oper) // dummy read
}

// CMP - indexed addressing: zeropage,X.
func opcodeD5(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// DEC - indexed addressing: zeropage,X.
func opcodeD6(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// DCP - indexed addressing: zeropage,X.
func opcodeD7(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// CLD - implied addressing.
func opcodeD8(cpu *CPU) {
	cpu.imp()
	cpu.P.clearFlags(Decimal)
}

// CMP - absolute indexed Y.
func opcodeD9(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// NOP - implied addressing.
func opcodeDA(cpu *CPU) {
	cpu.imp()
}

// DCP - absolute indexed Y.
func opcodeDB(cpu *CPU) {
	oper := cpu.aby(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// NOP - absolute indexed X.
func opcodeDC(cpu *CPU) {
	oper := cpu.abx(false)
	_ = cpu.Read8(oper) // dummy read
}

// CMP - absolute indexed X.
func opcodeDD(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// DEC - absolute indexed X.
func opcodeDE(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// DCP - absolute indexed X.
func opcodeDF(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val--
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.A - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.A {
		cpu.P.setFlags(Carry)
	}
}

// CPX - immediate addressing.
func opcodeE0(cpu *CPU) {
	val := cpu.fetch8()
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.X - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.X {
		cpu.P.setFlags(Carry)
	}
}

// SBC - indexed addressing (abs, X).
func opcodeE1(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	val ^= 0xff
	cpu.add(val)
}

// NOP - immediate addressing.
func opcodeE2(cpu *CPU) {
	val := cpu.fetch8()
	_ = val
}

// ISC - indexed addressing (abs, X).
func opcodeE3(cpu *CPU) {
	oper := cpu.izx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	final := val
	val ^= 0xff
	cpu.add(val)
	val = final
}

// CPX - zero page addressing.
func opcodeE4(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.X - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.X {
		cpu.P.setFlags(Carry)
	}
}

// SBC - zero page addressing.
func opcodeE5(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	val ^= 0xff
	cpu.add(val)
}

// INC - zero page addressing.
func opcodeE6(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// ISC - zero page addressing.
func opcodeE7(cpu *CPU) {
	oper := cpu.zpg()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	final := val
	val ^= 0xff
	cpu.add(val)
	val = final
}

// INX - implied addressing.
func opcodeE8(cpu *CPU) {
	cpu.imp()
	cpu.setreg(&cpu.X, cpu.X+1)
}

// SBC - immediate addressing.
func opcodeE9(cpu *CPU) {
	val := cpu.fetch8()
	val ^= 0xff
	cpu.add(val)
}

// NOP - implied addressing.
func opcodeEA(cpu *CPU) {
	cpu.imp()
}

// SBC - immediate addressing.
func opcodeEB(cpu *CPU) {
	val := cpu.fetch8()
	val ^= 0xff
	cpu.add(val)
}

// CPX - absolute addressing.
func opcodeEC(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(cpu.X - val)
	cpu.P.clearFlags(Carry)
	if val <= cpu.X {
		cpu.P.setFlags(Carry)
	}
}

// SBC - absolute addressing.
func opcodeED(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	val ^= 0xff
	cpu.add(val)
}

// INC - absolute addressing.
func opcodeEE(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// ISC - absolute addressing.
func opcodeEF(cpu *CPU) {
	oper := cpu.abs()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	final := val
	val ^= 0xff
	cpu.add(val)
	val = final
}

// BEQ - relative addressing.
func opcodeF0(cpu *CPU) {
	oper := cpu.rel()
	cpu.branch(oper, Zero, 0)
}

// SBC - indexed addressing (abs),Y.
func opcodeF1(cpu *CPU) {
	oper := cpu.izy(false)
	val := cpu.Read8(oper)
	val ^= 0xff
	cpu.add(val)
}

// STP - implied addressing.
func opcodeF2(cpu *CPU) {
	cpu.imp()
	cpu.halt()
}

// ISC - indexed addressing (abs),Y.
func opcodeF3(cpu *CPU) {
	oper := cpu.izy(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	final := val
	val ^= 0xff
	cpu.add(val)
	val = final
}

// NOP - indexed addressing: zeropage,X.
func opcodeF4(cpu *CPU) {
	oper := cpu.zpx()
	_ = cpu.Read8(oper) // dummy read
}

// SBC - indexed addressing: zeropage,X.
func opcodeF5(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	val ^= 0xff
	cpu.add(val)
}

// INC - indexed addressing: zeropage,X.
func opcodeF6(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// ISC - indexed addressing: zeropage,X.
func opcodeF7(cpu *CPU) {
	oper := cpu.zpx()
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	final := val
	val ^= 0xff
	cpu.add(val)
	val = final
}

// SED - implied addressing.
func opcodeF8(cpu *CPU) {
	cpu.imp()
	cpu.P.setFlags(Decimal)
}

// SBC - absolute indexed Y.
func opcodeF9(cpu *CPU) {
	oper := cpu.aby(false)
	val := cpu.Read8(oper)
	val ^= 0xff
	cpu.add(val)
}

// NOP - implied addressing.
func opcodeFA(cpu *CPU) {
	cpu.imp()
}

// ISC - absolute indexed Y.
func opcodeFB(cpu *CPU) {
	oper := cpu.aby(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	final := val
	val ^= 0xff
	cpu.add(val)
	val = final
}

// NOP - absolute indexed X.
func opcodeFC(cpu *CPU) {
	oper := cpu.abx(false)
	_ = cpu.Read8(oper) // dummy read
}

// SBC - absolute indexed X.
func opcodeFD(cpu *CPU) {
	oper := cpu.abx(false)
	val := cpu.Read8(oper)
	val ^= 0xff
	cpu.add(val)
}

// INC - absolute indexed X.
func opcodeFE(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
}

// ISC - absolute indexed X.
func opcodeFF(cpu *CPU) {
	oper := cpu.abx(true)
	val := cpu.Read8(oper)
	cpu.Write8(oper, val) // dummy write
	val++
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.clearFlags(Zero | Negative)
	cpu.P.setNZ(val)
	cpu.Write8(oper, val)
	final := val
	val ^= 0xff
	cpu.add(val)
	val = final
}

// list of unstable opcodes (unsupported)
var unstableOps = [256]uint8{
	0x02: 1, // STP
	0x12: 1, // STP
	0x22: 1, // STP
	0x32: 1, // STP
	0x42: 1, // STP
	0x52: 1, // STP
	0x62: 1, // STP
	0x72: 1, // STP
	0x8B: 1, // ANE
	0x92: 1, // STP
	0x93: 1, // SHA
	0x9B: 1, // TAS
	0x9C: 1, // SHY
	0x9E: 1, // SHX
	0x9F: 1, // SHA
	0xAB: 1, // LXA
	0xB2: 1, // STP
	0xD2: 1, // STP
	0xF2: 1, // STP
}

// nes 6502 opcodes table
var ops = [256]func(*CPU){
	BRK, opcode01, opcode02, opcode03, opcode04, opcode05, opcode06, opcode07, opcode08, opcode09, opcode0A, opcode0B, opcode0C, opcode0D, opcode0E, opcode0F,
	opcode10, opcode11, opcode12, opcode13, opcode14, opcode15, opcode16, opcode17, opcode18, opcode19, opcode1A, opcode1B, opcode1C, opcode1D, opcode1E, opcode1F,
	JSR, opcode21, opcode22, opcode23, opcode24, opcode25, opcode26, opcode27, opcode28, opcode29, opcode2A, opcode2B, opcode2C, opcode2D, opcode2E, opcode2F,
	opcode30, opcode31, opcode32, opcode33, opcode34, opcode35, opcode36, opcode37, opcode38, opcode39, opcode3A, opcode3B, opcode3C, opcode3D, opcode3E, opcode3F,
	opcode40, opcode41, opcode42, opcode43, opcode44, opcode45, opcode46, opcode47, opcode48, opcode49, opcode4A, opcode4B, opcode4C, opcode4D, opcode4E, opcode4F,
	opcode50, opcode51, opcode52, opcode53, opcode54, opcode55, opcode56, opcode57, opcode58, opcode59, opcode5A, opcode5B, opcode5C, opcode5D, opcode5E, opcode5F,
	opcode60, opcode61, opcode62, opcode63, opcode64, opcode65, opcode66, opcode67, opcode68, opcode69, opcode6A, opcode6B, opcode6C, opcode6D, opcode6E, opcode6F,
	opcode70, opcode71, opcode72, opcode73, opcode74, opcode75, opcode76, opcode77, opcode78, opcode79, opcode7A, opcode7B, opcode7C, opcode7D, opcode7E, opcode7F,
	opcode80, opcode81, opcode82, opcode83, opcode84, opcode85, opcode86, opcode87, opcode88, opcode89, opcode8A, opcode8B, opcode8C, opcode8D, opcode8E, opcode8F,
	opcode90, opcode91, opcode92, opcode93, opcode94, opcode95, opcode96, opcode97, opcode98, opcode99, opcode9A, opcode9B, opcode9C, opcode9D, opcode9E, opcode9F,
	opcodeA0, opcodeA1, opcodeA2, opcodeA3, opcodeA4, opcodeA5, opcodeA6, opcodeA7, opcodeA8, opcodeA9, opcodeAA, opcodeAB, opcodeAC, opcodeAD, opcodeAE, opcodeAF,
	opcodeB0, opcodeB1, opcodeB2, opcodeB3, opcodeB4, opcodeB5, opcodeB6, opcodeB7, opcodeB8, opcodeB9, opcodeBA, opcodeBB, opcodeBC, opcodeBD, opcodeBE, opcodeBF,
	opcodeC0, opcodeC1, opcodeC2, opcodeC3, opcodeC4, opcodeC5, opcodeC6, opcodeC7, opcodeC8, opcodeC9, opcodeCA, opcodeCB, opcodeCC, opcodeCD, opcodeCE, opcodeCF,
	opcodeD0, opcodeD1, opcodeD2, opcodeD3, opcodeD4, opcodeD5, opcodeD6, opcodeD7, opcodeD8, opcodeD9, opcodeDA, opcodeDB, opcodeDC, opcodeDD, opcodeDE, opcodeDF,
	opcodeE0, opcodeE1, opcodeE2, opcodeE3, opcodeE4, opcodeE5, opcodeE6, opcodeE7, opcodeE8, opcodeE9, opcodeEA, opcodeEB, opcodeEC, opcodeED, opcodeEE, opcodeEF,
	opcodeF0, opcodeF1, opcodeF2, opcodeF3, opcodeF4, opcodeF5, opcodeF6, opcodeF7, opcodeF8, opcodeF9, opcodeFA, opcodeFB, opcodeFC, opcodeFD, opcodeFE, opcodeFF,
}

// nes 6502 opcodes disassembly table
var disasmOps = [256]func(*CPU, uint16) DisasmOp{
	disasmImp, disasmIzx, disasmImp, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmAbs, disasmIzx, disasmImp, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImp, disasmIzx, disasmImp, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImp, disasmIzx, disasmImp, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmInd, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpy, disasmZpy, disasmImp, disasmAby, disasmImp, disasmAbx, disasmAby, disasmAbx, disasmAbx, disasmAby,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpy, disasmZpy, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAby, disasmAby,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImp, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
}

var opcodeNames = [256]string{
	"BRK", "ORA", "STP", "SLO", "NOP", "ORA", "ASL", "SLO", "PHP", "ORA", "ASL", "ANC", "NOP", "ORA", "ASL", "SLO",
	"BPL", "ORA", "STP", "SLO", "NOP", "ORA", "ASL", "SLO", "CLC", "ORA", "NOP", "SLO", "NOP", "ORA", "ASL", "SLO",
	"JSR", "AND", "STP", "RLA", "BIT", "AND", "ROL", "RLA", "PLP", "AND", "ROL", "ANC", "BIT", "AND", "ROL", "RLA",
	"BMI", "AND", "STP", "RLA", "NOP", "AND", "ROL", "RLA", "SEC", "AND", "NOP", "RLA", "NOP", "AND", "ROL", "RLA",
	"RTI", "EOR", "STP", "SRE", "NOP", "EOR", "LSR", "SRE", "PHA", "EOR", "LSR", "ALR", "JMP", "EOR", "LSR", "SRE",
	"BVC", "EOR", "STP", "SRE", "NOP", "EOR", "LSR", "SRE", "CLI", "EOR", "NOP", "SRE", "NOP", "EOR", "LSR", "SRE",
	"RTS", "ADC", "STP", "RRA", "NOP", "ADC", "ROR", "RRA", "PLA", "ADC", "ROR", "ARR", "JMP", "ADC", "ROR", "RRA",
	"BVS", "ADC", "STP", "RRA", "NOP", "ADC", "ROR", "RRA", "SEI", "ADC", "NOP", "RRA", "NOP", "ADC", "ROR", "RRA",
	"NOP", "STA", "NOP", "SAX", "STY", "STA", "STX", "SAX", "DEY", "NOP", "TXA", "ANE", "STY", "STA", "STX", "SAX",
	"BCC", "STA", "STP", "SHA", "STY", "STA", "STX", "SAX", "TYA", "STA", "TXS", "TAS", "SHY", "STA", "SHX", "SHA",
	"LDY", "LDA", "LDX", "LAX", "LDY", "LDA", "LDX", "LAX", "TAY", "LDA", "TAX", "LXA", "LDY", "LDA", "LDX", "LAX",
	"BCS", "LDA", "STP", "LAX", "LDY", "LDA", "LDX", "LAX", "CLV", "LDA", "TSX", "LAS", "LDY", "LDA", "LDX", "LAX",
	"CPY", "CMP", "NOP", "DCP", "CPY", "CMP", "DEC", "DCP", "INY", "CMP", "DEX", "SBX", "CPY", "CMP", "DEC", "DCP",
	"BNE", "CMP", "STP", "DCP", "NOP", "CMP", "DEC", "DCP", "CLD", "CMP", "NOP", "DCP", "NOP", "CMP", "DEC", "DCP",
	"CPX", "SBC", "NOP", "ISC", "CPX", "SBC", "INC", "ISC", "INX", "SBC", "NOP", "SBC", "CPX", "SBC", "INC", "ISC",
	"BEQ", "SBC", "STP", "ISC", "NOP", "SBC", "INC", "ISC", "SED", "SBC", "NOP", "ISC", "NOP", "SBC", "INC", "ISC",
}
