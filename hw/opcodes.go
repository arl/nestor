// Code generated by cpugen/gen_nes6502.go. DO NOT EDIT.
package hw

import (
	"fmt"
)

// ORA - indexed addressing (abs, X).
func opcode01(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode02(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x02) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// SLO - indexed addressing (abs, X).
func opcode03(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - zero page addressing.
func opcode04(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.tick()
}

// ORA - zero page addressing.
func opcode05(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL - zero page addressing.
func opcode06(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// SLO - zero page addressing.
func opcode07(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// PHP - implied addressing.
func opcode08(cpu *CPU) {
	cpu.tick()
	p := cpu.P
	p.setB(true)
	p.setUnused(true)
	cpu.push8(uint8(p))
}

// ORA - immediate addressing.
func opcode09(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL - adressing accumulator.
func opcode0A(cpu *CPU) {
	val := cpu.A
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A = val
}

// ANC - immediate addressing.
func opcode0B(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.P.setCarry(cpu.P.negative())
}

// NOP - absolute addressing.
func opcode0C(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.tick()
}

// ORA - absolute addressing.
func opcode0D(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL - absolute addressing.
func opcode0E(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// SLO - absolute addressing.
func opcode0F(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BPL - relative addressing.
func opcode10(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if !cpu.P.negative() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// ORA - indexed addressing (abs),Y.
func opcode11(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode12(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x12) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// SLO - indexed addressing (abs),Y.
func opcode13(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode14(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// ORA - indexed addressing: zeropage,X.
func opcode15(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL - indexed addressing: zeropage,X.
func opcode16(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// SLO - indexed addressing: zeropage,X.
func opcode17(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// CLC - implied addressing.
func opcode18(cpu *CPU) {
	cpu.P.setCarry(false)
	cpu.tick()
}

// ORA - absolute indexed Y.
func opcode19(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// NOP - implied addressing.
func opcode1A(cpu *CPU) {
	cpu.tick()
}

// SLO - absolute indexed Y.
func opcode1B(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode1C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// ORA - absolute indexed X.
func opcode1D(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
}

// ASL - absolute indexed X.
func opcode1E(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// SLO - absolute indexed X.
func opcode1F(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val = (val << 1) & 0xfe
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A |= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// JSR - absolute addressing.
func opcode20(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.tick()
	cpu.push16(cpu.PC - 1)
	cpu.PC = oper
}

// AND - indexed addressing (abs, X).
func opcode21(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode22(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x22) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// RLA - indexed addressing (abs, X).
func opcode23(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BIT - zero page addressing.
func opcode24(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.P &= 0b00111111
	cpu.P |= P(val & 0b11000000)
	cpu.P.checkZ(cpu.A & val)
}

// AND - zero page addressing.
func opcode25(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// ROL - zero page addressing.
func opcode26(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// RLA - zero page addressing.
func opcode27(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// PLP - implied addressing.
func opcode28(cpu *CPU) {
	cpu.tick()
	cpu.tick()
	var p uint8
	p = cpu.pull8()
	const mask uint8 = 0b11001111 // ignore B and U bits
	cpu.P = P(((uint8(cpu.P)) & (^mask)) | ((p) & (mask)))
}

// AND - immediate addressing.
func opcode29(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// ROL - adressing accumulator.
func opcode2A(cpu *CPU) {
	val := cpu.A
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A = val
}

// ANC - immediate addressing.
func opcode2B(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.P.setCarry(cpu.P.negative())
}

// BIT - absolute addressing.
func opcode2C(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.P &= 0b00111111
	cpu.P |= P(val & 0b11000000)
	cpu.P.checkZ(cpu.A & val)
}

// AND - absolute addressing.
func opcode2D(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// ROL - absolute addressing.
func opcode2E(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// RLA - absolute addressing.
func opcode2F(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BMI - relative addressing.
func opcode30(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.negative() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// AND - indexed addressing (abs),Y.
func opcode31(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode32(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x32) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// RLA - indexed addressing (abs),Y.
func opcode33(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode34(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// AND - indexed addressing: zeropage,X.
func opcode35(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// ROL - indexed addressing: zeropage,X.
func opcode36(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// RLA - indexed addressing: zeropage,X.
func opcode37(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// SEC - implied addressing.
func opcode38(cpu *CPU) {
	cpu.P.setCarry(true)
	cpu.tick()
}

// AND - absolute indexed Y.
func opcode39(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// NOP - implied addressing.
func opcode3A(cpu *CPU) {
	cpu.tick()
}

// RLA - absolute indexed Y.
func opcode3B(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode3C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// AND - absolute indexed X.
func opcode3D(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
}

// ROL - absolute indexed X.
func opcode3E(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.Write8(oper, val)
}

// RLA - absolute indexed X.
func opcode3F(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	carry := val & 0x80
	val <<= 1
	if cpu.P.carry() {
		val |= 1 << 0
	}
	cpu.tick()
	cpu.P.checkNZ(val)
	cpu.P.setCarry(carry != 0)
	cpu.A &= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// RTI - implied addressing.
func opcode40(cpu *CPU) {
	cpu.tick()
	cpu.tick()
	var p uint8
	p = cpu.pull8()
	const mask uint8 = 0b11001111 // ignore B and U bits
	cpu.P = P(((uint8(cpu.P)) & (^mask)) | ((p) & (mask)))
	cpu.PC = cpu.pull16()
}

// EOR - indexed addressing (abs, X).
func opcode41(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode42(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x42) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// SRE - indexed addressing (abs, X).
func opcode43(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - zero page addressing.
func opcode44(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.tick()
}

// EOR - zero page addressing.
func opcode45(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// LSR - zero page addressing.
func opcode46(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// SRE - zero page addressing.
func opcode47(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// PHA - implied addressing.
func opcode48(cpu *CPU) {
	cpu.tick()
	cpu.push8(cpu.A)
}

// EOR - immediate addressing.
func opcode49(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// LSR - adressing accumulator.
func opcode4A(cpu *CPU) {
	val := cpu.A
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A = val
}

// ALR - immediate addressing.
func opcode4B(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	// like and + lsr but saves one tick
	cpu.A &= val
	carry := cpu.A & 0x01 // carry is bit 0
	cpu.A = (cpu.A >> 1) & 0x7f
	cpu.P.checkNZ(cpu.A)
	cpu.P.setCarry(carry != 0)
}

// JMP - absolute addressing.
func opcode4C(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.PC = oper
}

// EOR - absolute addressing.
func opcode4D(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// LSR - absolute addressing.
func opcode4E(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// SRE - absolute addressing.
func opcode4F(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BVC - relative addressing.
func opcode50(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if !cpu.P.overflow() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// EOR - indexed addressing (abs),Y.
func opcode51(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode52(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x52) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// SRE - indexed addressing (abs),Y.
func opcode53(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode54(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// EOR - indexed addressing: zeropage,X.
func opcode55(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// LSR - indexed addressing: zeropage,X.
func opcode56(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// SRE - indexed addressing: zeropage,X.
func opcode57(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// CLI - implied addressing.
func opcode58(cpu *CPU) {
	cpu.P.setIntDisable(false)
	cpu.tick()
}

// EOR - absolute indexed Y.
func opcode59(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// NOP - implied addressing.
func opcode5A(cpu *CPU) {
	cpu.tick()
}

// SRE - absolute indexed Y.
func opcode5B(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode5C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// EOR - absolute indexed X.
func opcode5D(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
}

// LSR - absolute indexed X.
func opcode5E(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// SRE - absolute indexed X.
func opcode5F(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01 // carry is bit 0
		val = (val >> 1) & 0x7f
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A ^= val
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// RTS - implied addressing.
func opcode60(cpu *CPU) {
	cpu.PC = cpu.pull16()
	cpu.tick()
	cpu.tick()
	cpu.PC++
	cpu.tick()
}

// ADC - indexed addressing (abs, X).
func opcode61(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode62(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x62) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// RRA - indexed addressing (abs, X).
func opcode63(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - zero page addressing.
func opcode64(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.tick()
}

// ADC - zero page addressing.
func opcode65(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// ROR - zero page addressing.
func opcode66(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// RRA - zero page addressing.
func opcode67(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// PLA - implied addressing.
func opcode68(cpu *CPU) {
	cpu.tick()
	cpu.tick()
	cpu.A = cpu.pull8()
	cpu.P.checkNZ(cpu.A)
}

// ADC - immediate addressing.
func opcode69(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// ROR - adressing accumulator.
func opcode6A(cpu *CPU) {
	val := cpu.A
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.A = val
}

// ARR - immediate addressing.
func opcode6B(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A &= val
	cpu.A >>= 1
	cpu.P.setOverflow((cpu.A>>6)^(cpu.A>>5)&0x01 != 0)
	if cpu.P.carry() {
		cpu.A |= 1 << 7
	}
	cpu.P.checkNZ(cpu.A)
	cpu.P.setCarry(cpu.A&(1<<6) != 0)
}

// JMP - indirect addressing.
func opcode6C(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	lo := cpu.Read8(oper)
	// 2 bytes address wrap around
	hi := cpu.Read8((0xff00 & oper) | (0x00ff & (oper + 1)))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	cpu.PC = oper
}

// ADC - absolute addressing.
func opcode6D(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// ROR - absolute addressing.
func opcode6E(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// RRA - absolute addressing.
func opcode6F(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// BVS - relative addressing.
func opcode70(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.overflow() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// ADC - indexed addressing (abs),Y.
func opcode71(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcode72(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x72) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// RRA - indexed addressing (abs),Y.
func opcode73(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcode74(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// ADC - indexed addressing: zeropage,X.
func opcode75(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// ROR - indexed addressing: zeropage,X.
func opcode76(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// RRA - indexed addressing: zeropage,X.
func opcode77(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// SEI - implied addressing.
func opcode78(cpu *CPU) {
	cpu.P.setIntDisable(true)
	cpu.tick()
}

// ADC - absolute indexed Y.
func opcode79(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// NOP - implied addressing.
func opcode7A(cpu *CPU) {
	cpu.tick()
}

// RRA - absolute indexed Y.
func opcode7B(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcode7C(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// ADC - absolute indexed X.
func opcode7D(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// ROR - absolute indexed X.
func opcode7E(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	cpu.Write8(oper, val)
}

// RRA - absolute indexed X.
func opcode7F(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	{
		carry := val & 0x01
		val >>= 1
		if cpu.P.carry() {
			val |= 1 << 7
		}
		cpu.tick()
		cpu.P.checkNZ(val)
		cpu.P.setCarry(carry != 0)
	}
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	cpu.Write8(oper, val)
}

// NOP - immediate addressing.
func opcode80(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// STA - indexed addressing (abs, X).
func opcode81(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	cpu.Write8(oper, cpu.A)
}

// NOP - immediate addressing.
func opcode82(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// SAX - indexed addressing (abs, X).
func opcode83(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	cpu.Write8(oper, cpu.A&cpu.X)
}

// STY - zero page addressing.
func opcode84(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.Write8(oper, cpu.Y)
}

// STA - zero page addressing.
func opcode85(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.Write8(oper, cpu.A)
}

// STX - zero page addressing.
func opcode86(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.Write8(oper, cpu.X)
}

// SAX - zero page addressing.
func opcode87(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	cpu.Write8(oper, cpu.A&cpu.X)
}

// DEY - implied addressing.
func opcode88(cpu *CPU) {
	cpu.tick()
	cpu.Y--
	cpu.P.checkNZ(cpu.Y)
}

// NOP - immediate addressing.
func opcode89(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// TXA - implied addressing.
func opcode8A(cpu *CPU) {
	cpu.A = cpu.X
	cpu.P.checkNZ(cpu.X)
	cpu.tick()
}

// ANE - immediate addressing.
func opcode8B(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("unsupported unstable opcode 0x8B (ANE)\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// STY - absolute addressing.
func opcode8C(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.Write8(oper, cpu.Y)
}

// STA - absolute addressing.
func opcode8D(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.Write8(oper, cpu.A)
}

// STX - absolute addressing.
func opcode8E(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.Write8(oper, cpu.X)
}

// SAX - absolute addressing.
func opcode8F(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	cpu.Write8(oper, cpu.A&cpu.X)
}

// BCC - relative addressing.
func opcode90(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if !cpu.P.carry() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// STA - indexed addressing (abs),Y.
func opcode91(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	cpu.Write8(oper, cpu.A)
}

// JAM - immediate addressing.
func opcode92(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0x92) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// SHA - indexed addressing (abs),Y.
func opcode93(cpu *CPU) {
	// default
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	oper += uint16(cpu.Y)
	_ = oper
	msg := fmt.Sprintf("unsupported unstable opcode 0x93 (SHA)\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// STY - indexed addressing: zeropage,X.
func opcode94(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.Write8(oper, cpu.Y)
}

// STA - indexed addressing: zeropage,X.
func opcode95(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.Write8(oper, cpu.A)
}

// STX - indexed addressing: zeropage,Y.
func opcode96(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.Y)
	oper &= 0xff
	_ = oper
	cpu.Write8(oper, cpu.X)
}

// SAX - indexed addressing: zeropage,Y.
func opcode97(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.Y)
	oper &= 0xff
	_ = oper
	cpu.Write8(oper, cpu.A&cpu.X)
}

// TYA - implied addressing.
func opcode98(cpu *CPU) {
	cpu.A = cpu.Y
	cpu.P.checkNZ(cpu.Y)
	cpu.tick()
}

// STA - absolute indexed Y.
func opcode99(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	cpu.Write8(oper, cpu.A)
}

// TXS - implied addressing.
func opcode9A(cpu *CPU) {
	cpu.SP = cpu.X
	cpu.tick()
}

// TAS - absolute indexed Y.
func opcode9B(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	msg := fmt.Sprintf("unsupported unstable opcode 0x9B (TAS)\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// SHY - absolute indexed X.
func opcode9C(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	msg := fmt.Sprintf("unsupported unstable opcode 0x9C (SHY)\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// STA - absolute indexed X.
func opcode9D(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	cpu.Write8(oper, cpu.A)
}

// SHX - absolute indexed Y.
func opcode9E(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	msg := fmt.Sprintf("unsupported unstable opcode 0x9E (SHX)\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// SHA - absolute indexed Y.
func opcode9F(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	msg := fmt.Sprintf("unsupported unstable opcode 0x9F (SHA)\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// LDY - immediate addressing.
func opcodeA0(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.Y = val
	cpu.P.checkNZ(val)
}

// LDA - indexed addressing (abs, X).
func opcodeA1(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// LDX - immediate addressing.
func opcodeA2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.X = val
	cpu.P.checkNZ(val)
}

// LAX - indexed addressing (abs, X).
func opcodeA3(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.X = val
	cpu.P.checkNZ(val)
}

// LDY - zero page addressing.
func opcodeA4(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.Y = val
	cpu.P.checkNZ(val)
}

// LDA - zero page addressing.
func opcodeA5(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// LDX - zero page addressing.
func opcodeA6(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.X = val
	cpu.P.checkNZ(val)
}

// LAX - zero page addressing.
func opcodeA7(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.X = val
	cpu.P.checkNZ(val)
}

// TAY - implied addressing.
func opcodeA8(cpu *CPU) {
	cpu.Y = cpu.A
	cpu.P.checkNZ(cpu.A)
	cpu.tick()
}

// LDA - immediate addressing.
func opcodeA9(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// TAX - implied addressing.
func opcodeAA(cpu *CPU) {
	cpu.X = cpu.A
	cpu.P.checkNZ(cpu.A)
	cpu.tick()
}

// LXA - immediate addressing.
func opcodeAB(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("unsupported unstable opcode 0xAB (LXA)\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// LDY - absolute addressing.
func opcodeAC(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.Y = val
	cpu.P.checkNZ(val)
}

// LDA - absolute addressing.
func opcodeAD(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// LDX - absolute addressing.
func opcodeAE(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.X = val
	cpu.P.checkNZ(val)
}

// LAX - absolute addressing.
func opcodeAF(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.X = val
	cpu.P.checkNZ(val)
}

// BCS - relative addressing.
func opcodeB0(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.carry() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// LDA - indexed addressing (abs),Y.
func opcodeB1(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// JAM - immediate addressing.
func opcodeB2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0xB2) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// LAX - indexed addressing (abs),Y.
func opcodeB3(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.X = val
	cpu.P.checkNZ(val)
}

// LDY - indexed addressing: zeropage,X.
func opcodeB4(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.Y = val
	cpu.P.checkNZ(val)
}

// LDA - indexed addressing: zeropage,X.
func opcodeB5(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// LDX - indexed addressing: zeropage,Y.
func opcodeB6(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.Y)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.X = val
	cpu.P.checkNZ(val)
}

// LAX - indexed addressing: zeropage,Y.
func opcodeB7(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.Y)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.X = val
	cpu.P.checkNZ(val)
}

// CLV - implied addressing.
func opcodeB8(cpu *CPU) {
	cpu.P.setOverflow(false)
	cpu.tick()
}

// LDA - absolute indexed Y.
func opcodeB9(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// TSX - implied addressing.
func opcodeBA(cpu *CPU) {
	cpu.X = cpu.SP
	cpu.P.checkNZ(cpu.SP)
	cpu.tick()
}

// LAS - absolute indexed Y.
func opcodeBB(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = cpu.SP & val
	cpu.P.checkNZ(cpu.A)
	cpu.X = cpu.A
	cpu.SP = cpu.A
}

// LDY - absolute indexed X.
func opcodeBC(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.Y = val
	cpu.P.checkNZ(val)
}

// LDA - absolute indexed X.
func opcodeBD(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.P.checkNZ(val)
}

// LDX - absolute indexed Y.
func opcodeBE(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.X = val
	cpu.P.checkNZ(val)
}

// LAX - absolute indexed Y.
func opcodeBF(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.A = val
	cpu.X = val
	cpu.P.checkNZ(val)
}

// CPY - immediate addressing.
func opcodeC0(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.Y - val)
	cpu.P.setCarry(val <= cpu.Y)
}

// CMP - indexed addressing (abs, X).
func opcodeC1(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// NOP - immediate addressing.
func opcodeC2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// DCP - indexed addressing (abs, X).
func opcodeC3(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
	cpu.Write8(oper, val)
}

// CPY - zero page addressing.
func opcodeC4(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.Y - val)
	cpu.P.setCarry(val <= cpu.Y)
}

// CMP - zero page addressing.
func opcodeC5(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// DEC - zero page addressing.
func opcodeC6(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// DCP - zero page addressing.
func opcodeC7(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
	cpu.Write8(oper, val)
}

// INY - implied addressing.
func opcodeC8(cpu *CPU) {
	cpu.tick()
	cpu.Y++
	cpu.P.checkNZ(cpu.Y)
}

// CMP - immediate addressing.
func opcodeC9(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// DEX - implied addressing.
func opcodeCA(cpu *CPU) {
	cpu.tick()
	cpu.X--
	cpu.P.checkNZ(cpu.X)
}

// SBX - immediate addressing.
func opcodeCB(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	ival := (int16(cpu.A) & int16(cpu.X)) - int16(val)
	cpu.X = uint8(ival)
	cpu.P.checkNZ(uint8(ival))
	cpu.P.setCarry(ival >= 0)
}

// CPY - absolute addressing.
func opcodeCC(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.Y - val)
	cpu.P.setCarry(val <= cpu.Y)
}

// CMP - absolute addressing.
func opcodeCD(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// DEC - absolute addressing.
func opcodeCE(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// DCP - absolute addressing.
func opcodeCF(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
	cpu.Write8(oper, val)
}

// BNE - relative addressing.
func opcodeD0(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if !cpu.P.zero() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// CMP - indexed addressing (abs),Y.
func opcodeD1(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// JAM - immediate addressing.
func opcodeD2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0xD2) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// DCP - indexed addressing (abs),Y.
func opcodeD3(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcodeD4(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// CMP - indexed addressing: zeropage,X.
func opcodeD5(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// DEC - indexed addressing: zeropage,X.
func opcodeD6(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// DCP - indexed addressing: zeropage,X.
func opcodeD7(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
	cpu.Write8(oper, val)
}

// CLD - implied addressing.
func opcodeD8(cpu *CPU) {
	cpu.P.setDecimal(false)
	cpu.tick()
}

// CMP - absolute indexed Y.
func opcodeD9(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// NOP - implied addressing.
func opcodeDA(cpu *CPU) {
	cpu.tick()
}

// DCP - absolute indexed Y.
func opcodeDB(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcodeDC(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// CMP - absolute indexed X.
func opcodeDD(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
}

// DEC - absolute indexed X.
func opcodeDE(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// DCP - absolute indexed X.
func opcodeDF(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val--
	cpu.P.checkNZ(val)
	cpu.P.checkNZ(cpu.A - val)
	cpu.P.setCarry(val <= cpu.A)
	cpu.Write8(oper, val)
}

// CPX - immediate addressing.
func opcodeE0(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.X - val)
	cpu.P.setCarry(val <= cpu.X)
}

// SBC - indexed addressing (abs, X).
func opcodeE1(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// NOP - immediate addressing.
func opcodeE2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	cpu.tick()
}

// ISB - indexed addressing (abs, X).
func opcodeE3(cpu *CPU) {
	cpu.tick()
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	oper = uint16(uint8(oper) + cpu.X)
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	final := val
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	val = final
	cpu.Write8(oper, val)
}

// CPX - zero page addressing.
func opcodeE4(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.X - val)
	cpu.P.setCarry(val <= cpu.X)
}

// SBC - zero page addressing.
func opcodeE5(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// INC - zero page addressing.
func opcodeE6(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// ISB - zero page addressing.
func opcodeE7(cpu *CPU) {
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	final := val
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	val = final
	cpu.Write8(oper, val)
}

// INX - implied addressing.
func opcodeE8(cpu *CPU) {
	cpu.tick()
	cpu.X++
	cpu.P.checkNZ(cpu.X)
}

// SBC - immediate addressing.
func opcodeE9(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// NOP - implied addressing.
func opcodeEA(cpu *CPU) {
	cpu.tick()
}

// SBC - immediate addressing.
func opcodeEB(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// CPX - absolute addressing.
func opcodeEC(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.P.checkNZ(cpu.X - val)
	cpu.P.setCarry(val <= cpu.X)
}

// SBC - absolute addressing.
func opcodeED(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// INC - absolute addressing.
func opcodeEE(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// ISB - absolute addressing.
func opcodeEF(cpu *CPU) {
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	final := val
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	val = final
	cpu.Write8(oper, val)
}

// BEQ - relative addressing.
func opcodeF0(cpu *CPU) {
	off := int8(cpu.Read8(cpu.PC))
	oper := uint16(int16(cpu.PC+1) + int16(off))
	_ = oper
	if cpu.P.zero() { // do branch
		// A taken non-page-crossing branch ignores IRQ/NMI during its last
		// clock, so that next instruction executes before the IRQ.
		// Fixes 'branch_delays_irq' test.
		if cpu.runIRQ && !cpu.prevRunIRQ {
			cpu.runIRQ = false
		}
		cpu.tick()
		if 0xFF00&(cpu.PC+1) != 0xFF00&(oper) {
			cpu.tick()
		}
		cpu.PC = oper
		return
	}
	cpu.PC++
}

// SBC - indexed addressing (abs),Y.
func opcodeF1(cpu *CPU) {
	// extra cycle for page cross
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	if 0xFF00&(oper) != 0xFF00&(oper+uint16(cpu.Y)) {
		cpu.tick()
	}
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// JAM - immediate addressing.
func opcodeF2(cpu *CPU) {
	oper := cpu.PC
	cpu.PC++
	_ = oper
	msg := fmt.Sprintf("Halt and catch fire!\nJAM(0xF2) called\nPC:0x%04X", cpu.PC)
	panic(msg)
}

// ISB - indexed addressing (abs),Y.
func opcodeF3(cpu *CPU) {
	// extra cycle always
	oper := uint16(cpu.Read8(cpu.PC))
	cpu.PC++
	// read 16 bytes from the zero page, handling page wrap
	lo := cpu.Read8(oper)
	hi := cpu.Read8(uint16(uint8(oper) + 1))
	oper = uint16(hi)<<8 | uint16(lo)
	cpu.tick()
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	final := val
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	val = final
	cpu.Write8(oper, val)
}

// NOP - indexed addressing: zeropage,X.
func opcodeF4(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	cpu.tick()
}

// SBC - indexed addressing: zeropage,X.
func opcodeF5(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// INC - indexed addressing: zeropage,X.
func opcodeF6(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// ISB - indexed addressing: zeropage,X.
func opcodeF7(cpu *CPU) {
	cpu.tick()
	addr := cpu.Read8(cpu.PC)
	cpu.PC++
	oper := uint16(addr) + uint16(cpu.X)
	oper &= 0xff
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	final := val
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	val = final
	cpu.Write8(oper, val)
}

// SED - implied addressing.
func opcodeF8(cpu *CPU) {
	cpu.P.setDecimal(true)
	cpu.tick()
}

// SBC - absolute indexed Y.
func opcodeF9(cpu *CPU) {
	// extra cycle for page cross
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.Y)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// NOP - implied addressing.
func opcodeFA(cpu *CPU) {
	cpu.tick()
}

// ISB - absolute indexed Y.
func opcodeFB(cpu *CPU) {
	// default
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.Y)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	final := val
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	val = final
	cpu.Write8(oper, val)
}

// NOP - absolute indexed X.
func opcodeFC(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	cpu.tick()
}

// SBC - absolute indexed X.
func opcodeFD(cpu *CPU) {
	addr := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper := addr + uint16(cpu.X)
	if 0xFF00&(oper) != 0xFF00&(addr) {
		cpu.tick()
	}
	_ = oper
	val := cpu.Read8(oper)
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
}

// INC - absolute indexed X.
func opcodeFE(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	cpu.Write8(oper, val)
}

// ISB - absolute indexed X.
func opcodeFF(cpu *CPU) {
	cpu.tick()
	oper := cpu.Read16(cpu.PC)
	cpu.PC += 2
	oper += uint16(cpu.X)
	_ = oper
	val := cpu.Read8(oper)
	cpu.tick()
	val++
	cpu.P.checkNZ(val)
	final := val
	val ^= 0xff
	var carry uint16
	if cpu.P.carry() {
		carry = 1
	}
	sum := uint16(cpu.A) + uint16(val) + uint16(carry)
	cpu.P.checkCV(cpu.A, val, sum)
	cpu.A = uint8(sum)
	cpu.P.checkNZ(cpu.A)
	val = final
	cpu.Write8(oper, val)
}

// list of unstable opcodes (unsupported)
var unstableOps = [256]uint8{
	0x02: 1, // JAM
	0x12: 1, // JAM
	0x22: 1, // JAM
	0x32: 1, // JAM
	0x42: 1, // JAM
	0x52: 1, // JAM
	0x62: 1, // JAM
	0x72: 1, // JAM
	0x8B: 1, // ANE
	0x92: 1, // JAM
	0x93: 1, // SHA
	0x9B: 1, // TAS
	0x9C: 1, // SHY
	0x9E: 1, // SHX
	0x9F: 1, // SHA
	0xAB: 1, // LXA
	0xB2: 1, // JAM
	0xD2: 1, // JAM
	0xF2: 1, // JAM
}

// nes 6502 opcodes table
var ops = [256]func(*CPU){
	BRK, opcode01, opcode02, opcode03, opcode04, opcode05, opcode06, opcode07, opcode08, opcode09, opcode0A, opcode0B, opcode0C, opcode0D, opcode0E, opcode0F,
	opcode10, opcode11, opcode12, opcode13, opcode14, opcode15, opcode16, opcode17, opcode18, opcode19, opcode1A, opcode1B, opcode1C, opcode1D, opcode1E, opcode1F,
	opcode20, opcode21, opcode22, opcode23, opcode24, opcode25, opcode26, opcode27, opcode28, opcode29, opcode2A, opcode2B, opcode2C, opcode2D, opcode2E, opcode2F,
	opcode30, opcode31, opcode32, opcode33, opcode34, opcode35, opcode36, opcode37, opcode38, opcode39, opcode3A, opcode3B, opcode3C, opcode3D, opcode3E, opcode3F,
	opcode40, opcode41, opcode42, opcode43, opcode44, opcode45, opcode46, opcode47, opcode48, opcode49, opcode4A, opcode4B, opcode4C, opcode4D, opcode4E, opcode4F,
	opcode50, opcode51, opcode52, opcode53, opcode54, opcode55, opcode56, opcode57, opcode58, opcode59, opcode5A, opcode5B, opcode5C, opcode5D, opcode5E, opcode5F,
	opcode60, opcode61, opcode62, opcode63, opcode64, opcode65, opcode66, opcode67, opcode68, opcode69, opcode6A, opcode6B, opcode6C, opcode6D, opcode6E, opcode6F,
	opcode70, opcode71, opcode72, opcode73, opcode74, opcode75, opcode76, opcode77, opcode78, opcode79, opcode7A, opcode7B, opcode7C, opcode7D, opcode7E, opcode7F,
	opcode80, opcode81, opcode82, opcode83, opcode84, opcode85, opcode86, opcode87, opcode88, opcode89, opcode8A, opcode8B, opcode8C, opcode8D, opcode8E, opcode8F,
	opcode90, opcode91, opcode92, opcode93, opcode94, opcode95, opcode96, opcode97, opcode98, opcode99, opcode9A, opcode9B, opcode9C, opcode9D, opcode9E, opcode9F,
	opcodeA0, opcodeA1, opcodeA2, opcodeA3, opcodeA4, opcodeA5, opcodeA6, opcodeA7, opcodeA8, opcodeA9, opcodeAA, opcodeAB, opcodeAC, opcodeAD, opcodeAE, opcodeAF,
	opcodeB0, opcodeB1, opcodeB2, opcodeB3, opcodeB4, opcodeB5, opcodeB6, opcodeB7, opcodeB8, opcodeB9, opcodeBA, opcodeBB, opcodeBC, opcodeBD, opcodeBE, opcodeBF,
	opcodeC0, opcodeC1, opcodeC2, opcodeC3, opcodeC4, opcodeC5, opcodeC6, opcodeC7, opcodeC8, opcodeC9, opcodeCA, opcodeCB, opcodeCC, opcodeCD, opcodeCE, opcodeCF,
	opcodeD0, opcodeD1, opcodeD2, opcodeD3, opcodeD4, opcodeD5, opcodeD6, opcodeD7, opcodeD8, opcodeD9, opcodeDA, opcodeDB, opcodeDC, opcodeDD, opcodeDE, opcodeDF,
	opcodeE0, opcodeE1, opcodeE2, opcodeE3, opcodeE4, opcodeE5, opcodeE6, opcodeE7, opcodeE8, opcodeE9, opcodeEA, opcodeEB, opcodeEC, opcodeED, opcodeEE, opcodeEF,
	opcodeF0, opcodeF1, opcodeF2, opcodeF3, opcodeF4, opcodeF5, opcodeF6, opcodeF7, opcodeF8, opcodeF9, opcodeFA, opcodeFB, opcodeFC, opcodeFD, opcodeFE, opcodeFF,
}

func disasmAbs(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	oper2 := cpu.Bus.Peek8(pc + 2)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1, oper2},
		Oper:   fmt.Sprintf("$%04X", uint16(oper1)|uint16(oper2)<<8),
	}
}

func disasmAbx(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	oper2 := cpu.Bus.Peek8(pc + 2)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1, oper2},
		Oper:   fmt.Sprintf("$%04X,X", uint16(oper1)|uint16(oper2)<<8),
	}
}

func disasmAby(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	oper2 := cpu.Bus.Peek8(pc + 2)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1, oper2},
		Oper:   fmt.Sprintf("$%04X,Y", uint16(oper1)|uint16(oper2)<<8),
	}
}

func disasmAcc(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0},
		Oper:   "A",
	}
}

func disasmImm(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1},
		Oper:   fmt.Sprintf("#$%02X", oper1),
	}
}

func disasmImp(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0},
	}
}

func disasmInd(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	oper2 := cpu.Bus.Peek8(pc + 2)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1, oper2},
		Oper:   fmt.Sprintf("($%04X)", uint16(oper1)|uint16(oper2)<<8),
	}
}

func disasmIzx(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1},
		Oper:   fmt.Sprintf("($%02X,X)", oper1),
	}
}

func disasmIzy(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1},
		Oper:   fmt.Sprintf("($%02X),Y", oper1),
	}
}

func disasmRel(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1},
		Oper:   fmt.Sprintf("$%04X", uint16(int16(pc+2)+int16(int8(oper1)))),
	}
}

func disasmZpg(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1},
		Oper:   fmt.Sprintf("$%02X", oper1),
	}
}

func disasmZpx(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1},
		Oper:   fmt.Sprintf("$%02X", oper1),
	}
}

func disasmZpy(cpu *CPU, pc uint16) DisasmOp {
	oper0 := cpu.Bus.Peek8(pc + 0)
	oper1 := cpu.Bus.Peek8(pc + 1)
	return DisasmOp{
		PC:     pc,
		Opcode: opcodeNames[oper0],
		Bytes:  []byte{oper0, oper1},
		Oper:   fmt.Sprintf("$%02X", oper1),
	}
}

// nes 6502 opcodes disassembly table
var disasmOps = [256]func(*CPU, uint16) DisasmOp{
	disasmImp, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmAbs, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImp, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImp, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmAcc, disasmImm, disasmInd, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpy, disasmZpy, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAby, disasmAby,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpy, disasmZpy, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAby, disasmAby,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
	disasmImm, disasmIzx, disasmImm, disasmIzx, disasmZpg, disasmZpg, disasmZpg, disasmZpg, disasmImp, disasmImm, disasmImp, disasmImm, disasmAbs, disasmAbs, disasmAbs, disasmAbs,
	disasmRel, disasmIzy, disasmImm, disasmIzy, disasmZpx, disasmZpx, disasmZpx, disasmZpx, disasmImp, disasmAby, disasmImp, disasmAby, disasmAbx, disasmAbx, disasmAbx, disasmAbx,
}

var opcodeNames = [256]string{
	" BRK", " ORA", "*JAM", "*SLO", "*NOP", " ORA", " ASL", "*SLO", " PHP", " ORA", " ASL", "*ANC", "*NOP", " ORA", " ASL", "*SLO",
	" BPL", " ORA", "*JAM", "*SLO", "*NOP", " ORA", " ASL", "*SLO", " CLC", " ORA", "*NOP", "*SLO", "*NOP", " ORA", " ASL", "*SLO",
	" JSR", " AND", "*JAM", "*RLA", " BIT", " AND", " ROL", "*RLA", " PLP", " AND", " ROL", "*ANC", " BIT", " AND", " ROL", "*RLA",
	" BMI", " AND", "*JAM", "*RLA", "*NOP", " AND", " ROL", "*RLA", " SEC", " AND", "*NOP", "*RLA", "*NOP", " AND", " ROL", "*RLA",
	" RTI", " EOR", "*JAM", "*SRE", "*NOP", " EOR", " LSR", "*SRE", " PHA", " EOR", " LSR", "*ALR", " JMP", " EOR", " LSR", "*SRE",
	" BVC", " EOR", "*JAM", "*SRE", "*NOP", " EOR", " LSR", "*SRE", " CLI", " EOR", "*NOP", "*SRE", "*NOP", " EOR", " LSR", "*SRE",
	" RTS", " ADC", "*JAM", "*RRA", "*NOP", " ADC", " ROR", "*RRA", " PLA", " ADC", " ROR", "*ARR", " JMP", " ADC", " ROR", "*RRA",
	" BVS", " ADC", "*JAM", "*RRA", "*NOP", " ADC", " ROR", "*RRA", " SEI", " ADC", "*NOP", "*RRA", "*NOP", " ADC", " ROR", "*RRA",
	"*NOP", " STA", "*NOP", "*SAX", " STY", " STA", " STX", "*SAX", " DEY", "*NOP", " TXA", "*ANE", " STY", " STA", " STX", "*SAX",
	" BCC", " STA", "*JAM", "*SHA", " STY", " STA", " STX", "*SAX", " TYA", " STA", " TXS", "*TAS", "*SHY", " STA", "*SHX", "*SHA",
	" LDY", " LDA", " LDX", "*LAX", " LDY", " LDA", " LDX", "*LAX", " TAY", " LDA", " TAX", "*LXA", " LDY", " LDA", " LDX", "*LAX",
	" BCS", " LDA", "*JAM", "*LAX", " LDY", " LDA", " LDX", "*LAX", " CLV", " LDA", " TSX", "*LAS", " LDY", " LDA", " LDX", "*LAX",
	" CPY", " CMP", "*NOP", "*DCP", " CPY", " CMP", " DEC", "*DCP", " INY", " CMP", " DEX", "*SBX", " CPY", " CMP", " DEC", "*DCP",
	" BNE", " CMP", "*JAM", "*DCP", "*NOP", " CMP", " DEC", "*DCP", " CLD", " CMP", "*NOP", "*DCP", "*NOP", " CMP", " DEC", "*DCP",
	" CPX", " SBC", "*NOP", "*ISB", " CPX", " SBC", " INC", "*ISB", " INX", " SBC", " NOP", "*SBC", " CPX", " SBC", " INC", "*ISB",
	" BEQ", " SBC", "*JAM", "*ISB", "*NOP", " SBC", " INC", "*ISB", " SED", " SBC", "*NOP", "*ISB", "*NOP", " SBC", " INC", "*ISB",
}
