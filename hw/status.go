package hw

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type P uint8

func (p P) carry() bool {
	return p&0x1 != 0
}

func (p P) setCarry(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x1 | ival<<0
}

func (p P) zero() bool {
	return p&0x2 != 0
}

func (p P) setZero(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x2 | ival<<1
}

func (p P) intDisable() bool {
	return p&0x4 != 0
}

func (p P) setIntDisable(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x4 | ival<<2
}

func (p P) decimal() bool {
	return p&0x8 != 0
}

func (p P) setDecimal(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x8 | ival<<3
}

func (p P) b() bool {
	return p&0x10 != 0
}

func (p P) setB(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x10 | ival<<4
}

func (p P) unused() bool {
	return p&0x20 != 0
}

func (p P) setUnused(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x20 | ival<<5
}

func (p P) overflow() bool {
	return p&0x40 != 0
}

func (p P) setOverflow(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x40 | ival<<6
}

func (p P) negative() bool {
	return p&0x80 != 0
}

func (p P) setNegative(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return p&^0x80 | ival<<7
}
