package hw

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type P uint8

func (s P) C() bool {
	return s&0x1 != 0
}

func (s P) SetC(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x1 | ival<<0
}

func (s P) Z() bool {
	return s&0x2 != 0
}

func (s P) SetZ(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x2 | ival<<1
}

func (s P) I() bool {
	return s&0x4 != 0
}

func (s P) SetI(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x4 | ival<<2
}

func (s P) D() bool {
	return s&0x8 != 0
}

func (s P) SetD(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x8 | ival<<3
}

func (s P) B() bool {
	return s&0x10 != 0
}

func (s P) SetB(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x10 | ival<<4
}

func (s P) U() bool {
	return s&0x20 != 0
}

func (s P) SetU(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x20 | ival<<5
}

func (s P) V() bool {
	return s&0x40 != 0
}

func (s P) SetV(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x40 | ival<<6
}

func (s P) N() bool {
	return s&0x80 != 0
}

func (s P) SetN(val bool) P {
	var ival P
	if val {
		ival = 1
	}
	return s&^0x80 | ival<<7
}
